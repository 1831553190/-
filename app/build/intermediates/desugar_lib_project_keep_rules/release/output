-keep class j$.util.Map { *; }
-keep class j$.util.function.ToLongFunction
-keep class j$.util.function.BiConsumer
-keep class j$.util.Set$-CC {
    j$.util.Spliterator $default$spliterator(java.util.Set);
}
-keep class j$.util.stream.Stream
-keep class j$.util.function.ToIntFunction
-keep class j$.util.Map$-CC {
    void $default$forEach(java.util.Map, j$.util.function.BiConsumer);
    boolean $default$replace(java.util.Map, java.lang.Object, java.lang.Object, java.lang.Object);
    java.lang.Object $default$computeIfAbsent(java.util.Map, java.lang.Object, j$.util.function.Function);
    java.lang.Object $default$putIfAbsent(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$getOrDefault(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$replace(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$computeIfPresent(java.util.Map, java.lang.Object, j$.util.function.BiFunction);
    java.lang.Object $default$compute(java.util.Map, java.lang.Object, j$.util.function.BiFunction);
    boolean $default$remove(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$merge(java.util.Map, java.lang.Object, java.lang.Object, j$.util.function.BiFunction);
    void $default$replaceAll(java.util.Map, j$.util.function.BiFunction);
}
-keep class j$.time.LocalDate {
    java.lang.String format(j$.time.format.DateTimeFormatter);
    j$.time.LocalDate now();
}
-keep class j$.util.Optional {
    j$.util.Optional ofNullable(java.lang.Object);
}
-keep class j$.util.function.BiFunction
-keep class j$.util.Iterator$-CC {
    void $default$forEachRemaining(java.util.Iterator, j$.util.function.Consumer);
}
-keep class j$.lang.Iterable { *; }
-keep class j$.util.Collection$-CC {
    j$.util.stream.Stream $default$stream(java.util.Collection);
    boolean $default$removeIf(java.util.Collection, j$.util.function.Predicate);
    j$.util.Spliterator $default$spliterator(java.util.Collection);
    j$.util.stream.Stream $default$parallelStream(java.util.Collection);
}
-keep class j$.util.function.Predicate
-keep class j$.util.Map$Entry { *; }
-keep class j$.time.format.DateTimeFormatter {
    j$.time.format.DateTimeFormatter ofPattern(java.lang.String);
}
-keep class j$.util.Iterator { *; }
-keep class j$.util.function.Consumer
-keep class j$.util.function.Function
-keep class j$.util.Collection { *; }
-keep class j$.util.function.ToDoubleFunction
-keep class j$.util.List { *; }
-keep class j$.util.Set { *; }
-keep class j$.util.Comparator { *; }
-keep class j$.util.Comparator$-CC {
    java.util.Comparator $default$thenComparingLong(java.util.Comparator, j$.util.function.ToLongFunction);
    java.util.Comparator $default$thenComparingDouble(java.util.Comparator, j$.util.function.ToDoubleFunction);
    java.util.Comparator $default$reversed(java.util.Comparator);
    java.util.Comparator $default$thenComparing(java.util.Comparator, j$.util.function.Function, java.util.Comparator);
    java.util.Comparator $default$thenComparing(java.util.Comparator, j$.util.function.Function);
    java.util.Comparator $default$thenComparingInt(java.util.Comparator, j$.util.function.ToIntFunction);
    java.util.Comparator $default$thenComparing(java.util.Comparator, java.util.Comparator);
}
-keep class j$.util.concurrent.ConcurrentHashMap {
    java.lang.Object put(java.lang.Object, java.lang.Object);
    java.lang.Object remove(java.lang.Object);
    java.lang.Object get(java.lang.Object);
    boolean isEmpty();
    java.util.Set keySet();
    void <init>();
}
-keep class j$.util.List$-CC {
    j$.util.Spliterator $default$spliterator(java.util.List);
    void $default$sort(java.util.List, java.util.Comparator);
    void $default$replaceAll(java.util.List, j$.util.function.UnaryOperator);
}
-keep class j$.util.function.UnaryOperator
-keep class j$.util.Spliterator
-keep class j$.lang.Iterable$-CC {
    j$.util.Spliterator $default$spliterator(java.lang.Iterable);
    void $default$forEach(java.lang.Iterable, j$.util.function.Consumer);
}
