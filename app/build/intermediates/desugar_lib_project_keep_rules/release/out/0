-keep class j$.util.function.Consumer
-keep class j$.$r8$wrapper$java$util$function$UnaryOperator$-V-WRP {
    j$.util.function.UnaryOperator convert(java.util.function.UnaryOperator);
}
-keep class java.util.stream.Stream
-keep class j$.$r8$wrapper$java$util$stream$Stream$-WRP {
    java.util.stream.Stream convert(j$.util.stream.Stream);
}
-keep class j$.$r8$wrapper$java$util$function$Predicate$-V-WRP {
    j$.util.function.Predicate convert(java.util.function.Predicate);
}
-keep class j$.util.stream.Stream
-keep class java.util.function.Consumer
-keep class j$.util.List { *; }
-keep class java.util.Spliterator
-keep class j$.util.List$-CC {
    j$.util.Spliterator $default$spliterator(java.util.List);
    void $default$sort(java.util.List, java.util.Comparator);
    void $default$replaceAll(java.util.List, j$.util.function.UnaryOperator);
}
-keep class j$.$r8$wrapper$java$util$Spliterator$-WRP {
    java.util.Spliterator convert(j$.util.Spliterator);
}
-keep class j$.$r8$wrapper$java$util$function$Consumer$-V-WRP {
    j$.util.function.Consumer convert(java.util.function.Consumer);
}
-keep class java.util.function.Predicate
-keep class j$.util.function.UnaryOperator
-keep class j$.util.Spliterator
-keep class j$.util.function.Predicate
-keep class j$.util.Collection$-CC {
    j$.util.stream.Stream $default$stream(java.util.Collection);
    boolean $default$removeIf(java.util.Collection, j$.util.function.Predicate);
    j$.util.stream.Stream $default$parallelStream(java.util.Collection);
}
-keep class j$.lang.Iterable$-CC {
    void $default$forEach(java.lang.Iterable, j$.util.function.Consumer);
}
-keep class java.util.function.UnaryOperator
